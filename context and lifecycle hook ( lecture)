import React, {Fragment, Component, useState, createContext} from 'react';
import logo from './logo.svg';
import './App.css';
import {findRenderedComponentWithType} from "react-dom/test-utils";

const LoginContext = createContext();

class ErrorBoundary extends Component {
    constructor(props) {
        super(props);
        this.state = {hasError: false};
    }

    componentDidCatch(error, info) {
        this.setState({hasError: true})
    }

    render() {
        if (this.state.hasError) {
            return <h1>Щось пішло не так...</h1>;
        }

        return this.props.children;
    }
}


class List extends Component {
    static contextType = LoginContext;
    state = {
        posts: [],
    };

    componentDidMount() {

        if (this.context.isLoggedIn && !this.state.posts.length) {
            fetch('https://jsonplaceholder.typicode.com/todos/')
                .then(response => response.json())
                .then(json => {
                        this.setState({posts: json})
                    }
                )
        }
    }

    componentDidUpdate(prevProps, prevState, snapshot) {
        if (this.context.isLoggedIn && !this.state.posts.length) {
            fetch('https://jsonplaceholder.typicode.com/todos/')
                .then(response => response.json())
                .then(json => {
                        this.setState({posts: json})
                    }
                )
        }

        if (!this.context.isLoggedIn && this.state.posts.length) {
            this.setState({posts: []});
        }
    }

    renderLoginForm = () => {
        return (
            <div>
                <h1>You are not log in, please sign</h1>
                <button onClick={this.context.signIn}>Login</button>
            </div>
        )
    };

    render() {
        const {posts} = this.state;
        return (
            <div>
                <button onClick={this.context.signOut}>Logout</button>
                {posts.length && posts.map(item => <div key={item.id}>{item.title}</div>) || this.renderLoginForm()}
            </div>
        )
    }
}

class Aside extends Component {
    render() {
        return (
            <div className='aside'>
                Aside
            </div>
        )
    }
}

class Content extends Component {
    render() {
        return (
            <div className='content'>
                <h1> some title</h1>

                <List/>
            </div>
        )
    }

}

class MainComponent extends Component {
    render() {
        return (
            <div className='main-wrapper'>
                <ErrorBoundary>
                    <Aside/>
                </ErrorBoundary>

                <ErrorBoundary>
                    <Content/>
                </ErrorBoundary>

            </div>
        )
    }

}


class UserInfoContext extends Component {


    constructor(props) {
        super(props);
        this.state = {
            isLoggedIn: false,
        }
    }

    signIn = () => this.setState({isLoggedIn: true});
    signOut = () => this.setState({isLoggedIn: false});

    render() {
        const {children} = this.props;
        return (
            <LoginContext.Provider value={{
                isLoggedIn: this.state.isLoggedIn,
                signIn: this.signIn,
                signOut: this.signOut,

            }}>
                {children}
            </LoginContext.Provider>

        )
    }
}


class App extends Component {


    render() {
        return (
            <div>
                <UserInfoContext>
                    <MainComponent/>
                </UserInfoContext>

            </div>

        )
    }
}


export default App
